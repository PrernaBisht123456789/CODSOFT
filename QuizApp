import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

class Question {
    String question;
    String[] options;
    int correctAnswer;

    public Question(String question, String[] options, int correctAnswer) {
        this.question = question;
        this.options = options;
        this.correctAnswer = correctAnswer;
    }
}

public class QuizApp {
    private JFrame frame;
    private JPanel questionPanel;
    private JLabel questionLabel;
    private JRadioButton[] optionButtons;
    private ButtonGroup optionsGroup;
    private JButton submitButton;
    private JLabel timerLabel;
    private Timer timer;
    private int currentQuestionIndex = 0;
    private int score = 0;
    private List<Question> questions;

    public QuizApp() {
        questions = new ArrayList<>();
        questions.add(new Question("What is the capital of France?", new String[]{"Paris", "London", "Berlin", "Madrid"}, 0));
        questions.add(new Question("Who wrote 'Hamlet'?", new String[]{"Shakespeare", "Tolstoy", "Hemingway", "Twain"}, 0));
        // Add more questions as needed

        frame = new JFrame("Quiz Application");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        questionPanel = new JPanel();
        questionPanel.setLayout(new GridLayout(6, 1));

        questionLabel = new JLabel();
        questionPanel.add(questionLabel);

        optionButtons = new JRadioButton[4];
        optionsGroup = new ButtonGroup();
        for (int i = 0; i < 4; i++) {
            optionButtons[i] = new JRadioButton();
            optionsGroup.add(optionButtons[i]);
            questionPanel.add(optionButtons[i]);
        }

        timerLabel = new JLabel("Time left: 10");
        questionPanel.add(timerLabel);

        submitButton = new JButton("Submit");
        submitButton.addActionListener(new SubmitButtonListener());
        questionPanel.add(submitButton);

        frame.add(questionPanel);
        frame.setVisible(true);

        loadNextQuestion();
    }

    private void loadNextQuestion() {
        if (currentQuestionIndex < questions.size()) {
            Question currentQuestion = questions.get(currentQuestionIndex);
            questionLabel.setText(currentQuestion.question);
            for (int i = 0; i < 4; i++) {
                optionButtons[i].setText(currentQuestion.options[i]);
                optionButtons[i].setSelected(false);
            }
            startTimer();
        } else {
            showResults();
        }
    }

    private void startTimer() {
        timer = new Timer(1000, new TimerListener());
        timer.start();
    }

    private class TimerListener implements ActionListener {
        int timeLeft = 10;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (timeLeft > 0) {
                timeLeft--;
                timerLabel.setText("Time left: " + timeLeft);
            } else {
                timer.stop();
                submitAnswer();
            }
        }
    }

    private void submitAnswer() {
        timer.stop();
        Question currentQuestion = questions.get(currentQuestionIndex);
        for (int i = 0; i < 4; i++) {
            if (optionButtons[i].isSelected() && i == currentQuestion.correctAnswer) {
                score++;
            }
        }
        currentQuestionIndex++;
        loadNextQuestion();
    }

    private class SubmitButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            submitAnswer();
        }
    }

    private void showResults() {
        frame.getContentPane().removeAll();
        frame.setLayout(new BorderLayout());

        JLabel resultLabel = new JLabel("Your score: " + score + "/" + questions.size());
        frame.add(resultLabel, BorderLayout.CENTER);

        JPanel summaryPanel = new JPanel();
        summaryPanel.setLayout(new GridLayout(questions.size(), 1));
        for (int i = 0; i < questions.size(); i++) {
            Question question = questions.get(i);
            JLabel summaryLabel = new JLabel((i + 1) + ". " + question.question + " - Correct answer: " + question.options[question.correctAnswer]);
            summaryPanel.add(summaryLabel);
        }

        frame.add(summaryPanel, BorderLayout.SOUTH);

        frame.revalidate();
        frame.repaint();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(QuizApp::new);
    }
}
